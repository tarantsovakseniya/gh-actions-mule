name: ci_cd_pipeline_jfrog
on: 
    workflow_dispatch:
        inputs:
            mule-env:
                description: Mulesoft environment to deploy
                required: true
                default: 'sandbox'
jobs:
    sandbox:
        if: github.event.inputs.mule-env == 'sandbox'
        environment: sandbox
        env: 
            CLOUDHUB_ENVIRONMENT: "Sandbox" 
            CLOUDHUB_WORKERS: "1"
            CLOUDHUB_WORKER_TYPE: "MICRO"
            CLOUDHUB_REGION: "us-east-2"
            CLOUDHUB_ID: ${{ secrets.CLOUDHUB_ID }}
            CLOUDHUB_SECRET: ${{ secrets.CLOUDHUB_SECRET }}
        permissions:
            packages: write
            contents: write
        runs-on: ubuntu-latest
        steps:
              # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
            - name: Get the code
              uses: actions/checkout@v4
            # Set up Java
            - name: Set up JDK 8
              uses: actions/setup-java@v4
              with:
                distribution: 'adopt-hotspot'
                java-version: '8'
                cache: 'maven'
                #When set to false, the action tries to first resolve a version of Java from the local tool cache on the runner.
                #If unable to find a specific version in the cache, the action will download a version of Java.
                #If check-latest is set to true, the action first checks if the cached version is the latest one.
                #If the locally cached version is not the most up-to-date, the latest version of Java will be downloaded.
                #Setting check-latest to true has performance implications as downloading versions of Java is slower than using cached versions.
                check-latest: false
            - name: JOB settings DETAILS
              run: |
                cat /home/runner/.m2/settings.xml
            - name: Build
              run: mvn clean package -DskipTests
            - name: Print pom version and project name
              run: |
                mvn help:evaluate -Dexpression=project.version -q -DforceStdout
                mvn help:evaluate -Dexpression=project.name -q -DforceStdout
            - name: Set up Jfrog
              uses: jfrog/setup-jfrog-cli@v4
              env:
                # JFrog platform url (for example: https://acme.jfrog.io)
                JF_URL: ${{ secrets.JF_URL }}

                # Basic authentication credentials
                JF_USER: ${{ secrets.JF_USER  }}
                JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
                JFROG_CLI_TRANSITIVE_DOWNLOAD_EXPERIMENTAL: true
            - name: Showing the Configured Servers
              run: |
                  jf c s 
            - name: JFrog Ping
              run: |
                jf rt ping
                jf --version
            # Extract build id from input
            # - name: Extract Build Id
            #   id: build-data
            #   run: |
            #     echo 'JFROG_CLI_BUILD_NAME=${{ github.event.inputs.buildName }} >> $GITHUB_OUTPUT'
            #     echo 'JFROG_CLI_BUILD_NUMBER=${{ github.event.inputs.buildNumber }} >> $GITHUB_OUTPUT'
            - name: Run JFrog CLI
              # Collect environment variables for the build
              # Collect VCS details from git and add them to the build
              # Publish build info
              run: |
                cd target
                ls
            - name: Maven Config
              run: |
                jf mvn-config --repo-deploy-releases mule-k-libs-release-local --repo-deploy-snapshots mule-k-libs-snapshot-local
            # echo JFROG_CLI_BUILD_NAME=mule >> $GITHUB_ENV
            # echo JFROG_CLI_BUILD_NUMBER=$GITHUB_RUN_NUMBER >> $GITHUB_ENV
            # echo JFROG_CLI_BUILD_URL=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID >> $GITHUB_ENV
            - name: Upload artifact
              run: |
                jf mvn clean install
            - name: Add folder
              run: mkdir -p artifact
            - name: Download artifact
              run: 
                jf rt dl --build ${{ env.JFROG_CLI_BUILD_NAME }}/${{ env.JFROG_CLI_BUILD_NUMBER }} "*" /artifact
            - name: Check folder
              run: 
                ls
                cd artifact
                ls
              # jf c s
              # jf rt c add hello

              # jf config add snapshot --artifactory-url '' --user ${{ secrets.JF_USER  }} --password ${{ secrets.JF_PASSWORD }}
              # jf rt u target/gh-actions-mule-1.0.6-SNAPSHOT-mule-application.jar mule-k-libs-snapshot-local/com/mycompany/
            
            # - name: Failure check
            #   run: |
            #     echo "JFROG_BUILD_STATUS=FAIL" >> $GITHUB_ENV
            #   if: failure()
            # # Collect and store environment variables in the build-info
            # # Collect and store VCS details in the build-info
            # # Publish the build-info to Artifactory
            # # Scan the published build-info with Xray
            # - name: Publish build
            #   run: |
            #     jfrog rt bce
            #     jfrog rt bag
            #     jfrog rt bp
            #     jfrog rt bs
            #   if: always()